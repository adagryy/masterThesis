
@model serwer.Models.ImagesDownloadDetails

@{
    ViewBag.Title = "ImagesView";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

@{
    <div class="container-fluid">
        <div class="row">
            <br />
            <div class="col-sm-8">
                @Html.ActionLink("Ponownie ładuj obraz", "uploadFile", "Images", null, new { @class = "btn btn-primary btn-lg" })
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <div class="row">
            @{
                if (ViewBag.Message != null)
                {
                    <div class="alert alert-success">
                        <p>@ViewBag.Message</p>
                    </div>
                }
            }
        </div>
    </div>

    foreach (string file in Model.items)
    {
        <div class="container-fluid">
            <div>
                @{
                    string imPath = "";
                    if (file.Equals(serwer.Config.ServerConfigurator.originalImageName + Model.originalImageExtension))
                    {
                        <p>
                            <h2>Obraz orginalny</h2>
                            @*@Html.ActionLink("Pobierz", "Download", "Images", new { ImageName = "images.jpg" }) this syntax not working, so be cerreful*@
                            
                            @Html.ActionLink("Pobierz", "Download", "Images", routeValues: new { ImageName = @file.ToString() }, htmlAttributes: new { @class = "btn btn-success btn-lg" })
                            @using (@Html.BeginForm("RemoveImage", "Images", FormMethod.Post, new { @class = "", role = "form", enctype = "multipart/form-data" }))
                            {
                                @Html.AntiForgeryToken()
                                Model.removeImagePath = serwer.Config.ServerConfigurator.imageStoragePath + User.Identity.Name + file.ToString();    
                                            
                                @Html.HiddenFor(r => r.removeImagePath)
                                            
                                <input type="submit" value="Usuń obraz" class="btn btn-danger btn-lg" />                                           
                            }          
                                
                        </p>
                        imPath = Url.Content(serwer.Config.ServerConfigurator.imageStoragePath + User.Identity.Name + "/" + file) + "?noCache=" + DateTimeOffset.Now.ToUnixTimeMilliseconds();
                    }
                    else if (file.Equals(serwer.Config.ServerConfigurator.processedImageName + Model.processedImageExtension))
                    {
                        <p>
                            <h2>Obraz przetworzony</h2>
                            @*@Html.ActionLink("Pobierz", "Download", "Images", new { ImageName = "images.jpg" }) this syntax not working, so be cerreful*@
                            @Html.ActionLink("Pobierz", "Download", "Images", routeValues: new { ImageName = @file.ToString() }, htmlAttributes: new { @class = "btn btn-success btn-lg" })
                            @using (@Html.BeginForm("RemoveImage", "Images", FormMethod.Post, new { @class = "", role = "form", enctype = "multipart/form-data" }))
                            {
                                @Html.AntiForgeryToken()
                                Model.removeImagePath = serwer.Config.ServerConfigurator.imageStoragePath + User.Identity.Name + file.ToString();

                                @Html.HiddenFor(r => r.removeImagePath)

                                <input type="submit" value="Usuń obraz" class="btn btn-danger btn-lg" />
                            }    
                        </p>
                        imPath = Url.Content(serwer.Config.ServerConfigurator.imageStoragePath + User.Identity.Name + "/" + file) + "?noCache=" + DateTimeOffset.Now.ToUnixTimeMilliseconds();
                    }
                    else
                    {
                        // DateTimeOffset.Now.ToUnixTimeMilliseconds() is used to prevent caching images in browsers
                        // this "imPath" - path to the personal original image
                        imPath = Url.Content(serwer.Config.ServerConfigurator.imageStoragePath + User.Identity.Name + "/" + file) + "?noCache=" + DateTimeOffset.Now.ToUnixTimeMilliseconds();
                    }
                                
                }
            </div>
            <div class="row">
                <img class="img-responsive col-sm-8" src="@imPath" />
            </div>
        </div>
    }
}
