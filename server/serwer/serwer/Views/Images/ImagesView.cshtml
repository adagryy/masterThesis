
@model serwer.Models.ImagesDownloadDetails

@{
    ViewBag.Title = "ImagesView";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

@{
    <br />
    <div class="container-fluid">
        <div class="row">
            <br /><br />
            <div class="col-sm-8">
                @Html.ActionLink("Ponownie ładuj obraz", "uploadFile", "Images", null, new { @class = "btn btn-primary btn-lg" })
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <div class="row">
            @{
                if (ViewBag.Message != null)
                {
                    <div class="alert alert-success">
                        <p>@ViewBag.Message</p>
                    </div>
                }
            }
        </div>
    </div>

    foreach (string file in Model.items)
    {
        <div class="container-fluid">
            <div>
                @{
                    string imPath = "";
                    if (file.Equals(serwer.Config.ServerConfigurator.originalImageName + Model.originalImageExtension))
                    {
                        <p>
                            <h2>Obraz orginalny</h2>
                            @*@Html.ActionLink("Pobierz", "Download", "Images", new { ImageName = "images.jpg" }) this syntax not working, so be cerreful*@
                            
                            
                            @*@using (@Html.BeginForm("RemoveImage", "Images", FormMethod.Post, new { @class = "", role = "form", enctype = "multipart/form-data" }))
                            {
                                @Html.AntiForgeryToken()
                                Model.removeImageName = file.ToString();

                                @Html.HiddenFor(r => r.removeImageName)

                                @Html.ActionLink("Pobierz obraz", "DownloadImage", "Images", routeValues: new { ImageName = @file.ToString() }, htmlAttributes: new { @class = "btn btn-success btn-lg" })
                                <input type="submit" value="Usuń" class="btn btn-danger btn-lg" />                                           
                            }*@          
                             @Html.ActionLink("Pobierz obraz", "DownloadImage", "Images", routeValues: new { ImageName = @file.ToString() }, htmlAttributes: new { @class = "btn btn-success btn-lg" })
                            </p>

                        //imPath = Url.Content(serwer.Config.ServerConfigurator.usersStorage + User.Identity.Name + serwer.Config.ServerConfigurator.directoryPathSeparator + file) + "?noCache=" + DateTimeOffset.Now.ToUnixTimeMilliseconds();
                        <p>
                            <center>
                                <div class="row">
                                    @*<img class="img-responsive" style="width: 100%;" src="@imPath" />*@
                                    @*<img class="img-responsive" style="width: 100%;" src="@imPath" />*@
                                    <img src="@Url.Action("DownloadImage","Images", new {ImageName = "original.jpg", noCache = DateTimeOffset.Now.ToUnixTimeMilliseconds()})" style="width: 100%; height: 100%;" id="originalImage"/>
                                </div>
                            </center>
                        </p>


                        if (!File.Exists(serwer.Config.ServerConfigurator.usersStorage + User.Identity.Name + serwer.Config.ServerConfigurator.directoryPathSeparator + serwer.Config.ServerConfigurator.processedImageName + Model.processedImageExtension))
                        {
                            <br />
                            <p><h4> Trwa przetwarzanie obrazu. Strona odświeży się automatycznie, gdy przetwarzanie zostanie zakończone. Możesz także ręcznie odświeżyć stronę naciskając klawisz F5.</h4></p>
                        }

                    }
                    else if (file.Equals(serwer.Config.ServerConfigurator.processedImageName + Model.processedImageExtension))
                    {
                        <p>
                            <h2>Obraz przetworzony</h2>
                            @*@Html.ActionLink("Pobierz", "Download", "Images", new { ImageName = "images.jpg" }) this syntax not working, so be cerreful*@

                            @*@using (@Html.BeginForm("RemoveImage", "Images", FormMethod.Post, new { @class = "", role = "form", enctype = "multipart/form-data" }))
                            {
                                @Html.AntiForgeryToken()
                                Model.removeImageName = file.ToString();

                                @Html.HiddenFor(r => r.removeImageName)

                                @Html.ActionLink("Pobierz obraz", "DownloadImage", "Images", routeValues: new { ImageName = @file.ToString() }, htmlAttributes: new { @class = "btn btn-success btn-lg" })
                                <input type="submit" value="Usuń" class="btn btn-danger btn-lg" />
                            }*@
                            @Html.ActionLink("Pobierz obraz", "DownloadImage", "Images", routeValues: new { ImageName = @file.ToString() }, htmlAttributes: new { @class = "btn btn-success btn-lg" })
                        </p>
                        //imPath = Url.Content(serwer.Config.ServerConfigurator.imageStoragePath + User.Identity.Name + "/" + file) + "?noCache=" + DateTimeOffset.Now.ToUnixTimeMilliseconds();
                        <div class="row">
                            @*<img class="img-responsive" style="width: 100%;" id="processedImage" src="@imPath" />*@
                            <img src="@Url.Action("DownloadImage","Images", new {ImageName = "processed.jpg", noCache = DateTimeOffset.Now.ToUnixTimeMilliseconds()})" id="processedImage"  style="width: 100%; height: 100%;" />
                        </div>
                    }
                    else if (file.Equals(serwer.Config.ServerConfigurator.afterProcessingDataFileName + serwer.Config.ServerConfigurator.afterProcessingDataFileExtension) && Model.processedImageDataInJSON != null)
                    {
                        <p>
                            <h2>Dane z przetworzonego obrazu</h2>

                            @{
                                // Below it displays whole content of JSON file
                                dynamic stuff = Newtonsoft.Json.JsonConvert.DeserializeObject(Model.processedImageDataInJSON);
                                foreach (var stuffItem in stuff)
                                {
                                    <div><strong>@stuffItem.Name: </strong>@stuffItem.Value</div>
                                }
                            }
                            <br />
                            @Html.ActionLink("Pobierz dane", "DownloadImage", "Images", routeValues: new { ImageName = @file.ToString() }, htmlAttributes: new { @class = "btn btn-success btn-lg" })
                        </p>
                    }
                    else
                    {
                        // DateTimeOffset.Now.ToUnixTimeMilliseconds() is used to prevent caching images in browsers
                        // this "imPath" - path to the personal original image
                        //imPath = Url.Content(serwer.Config.ServerConfigurator.imageStoragePath + User.Identity.Name + "/" + file) + "?noCache=" + DateTimeOffset.Now.ToUnixTimeMilliseconds();
                    @*<div class="row" id="processedImage">
                        <img class="img-responsive" style="width: 100%;" src="@imPath" />
                    </div>*@
                    }

                }
            </div>
            @*<div class="row">
                <img class="img-responsive col-sm-8" src="@imPath" />
            </div>*@
        </div>
    }

    
    <script type="text/javascript">
        var protocol = window.location.protocol;
        var domain = window.location.hostname;
        var port = window.location.port;

        var url = protocol + "//" + domain + ":" + port + "/MobileDevices/checkIfProcessingIsFinished";
        var reloadFlag = false;

        // Shorthand for $( document ).ready()
        $(function () {
            if ($("#originalImage").length != 0) { 
                $.ajax({
                    url: url,
                    method: "POST",
                    statusCode: {
                        404: function () {
                            setTimeout(checkIfProcessingIsFinished, 1000); // you could choose not to continue on failure...
                        },
                        200: function () {
                            if ($("#processedImage").length === 0)
                                location.reload();
                            console.log("OK");
                        }
                    }
                });
            }
        });

        function checkIfProcessingIsFinished() {
            $.ajax({
                url: url,
                method: "POST",
                statusCode: {
                    404: function () {
                        console.log("Waiting for processed image!");
                        setTimeout(checkIfProcessingIsFinished, 1000); // you could choose not to continue on failure...
                    },
                    200: function () {
                        location.reload();
                    }
                }
            });
        }
    </script>
    
}
